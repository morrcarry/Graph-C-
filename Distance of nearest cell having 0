class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {   //mat is the original matrix given//
        int n=mat.size();
        int m=mat[0].size();
        vector<vector<int>>v(n,vector<int>(m,1));
        vector<vector<int>>d(n,vector<int>(m,0));
        queue<pair<pair<int,int>,int>>q;
        for(int i=0;i<n;i++){                                      // store all 0's in queue//
            for(int j=0;j<m;j++){
                if(mat[i][j]==0){
                    q.push({{i,j},0});
                    v[i][j]=0;
                }
            }
        }
        while(!q.empty()){
            int row=q.front().first.first;
            int col=q.front().first.second;
            int dis=q.front().second;
            q.pop();
            d[row][col]=dis;
            int drow[]={-1,0,1,0};
            int dcol[]={0,1,0,-1};
            for(int i=0;i<4;i++){                                   //checking all neighbours for 0//
                int nrow=row+drow[i];
                int ncol=col+dcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && v[nrow][ncol]!=0){
                    q.push({{nrow,ncol},dis+1});
                    v[nrow][ncol]=0;
                }
            }
        }

       return d; 
    }
};
